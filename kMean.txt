import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt
import seaborn as sns

# 1. Load dataset
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/00292/Wholesale%20customers%20data.csv"
df = pd.read_csv(url)

# 2. Preprocessing
X = df.drop(columns=["Region", "Channel"], errors='ignore')

# Add Gaussian Noise
def add_gaussian_noise(X, mean=0.0, std=0.3):
    noise = np.random.normal(loc=mean, scale=std, size=X.shape)
    return X + noise

X_noisy = add_gaussian_noise(X)

# Normalize the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_noisy)

# 3. Elbow Method
inertia = []
K = range(1, 11)
for k in K:
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
    kmeans.fit(X_scaled)
    inertia.append(kmeans.inertia_)

plt.plot(K, inertia, 'bo-')
plt.xlabel('Number of clusters (k)')
plt.ylabel('Inertia')
plt.title('Elbow Method for Optimal k')
plt.grid(True)
plt.show()

# 4. Apply KMeans with chosen k (say 3)
k = 3
kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
clusters = kmeans.fit_predict(X_scaled)

# 5. Silhouette Score
sil_score = silhouette_score(X_scaled, clusters)
print(f"Silhouette Score for k={k}: {sil_score:.4f}")

# 6. Add cluster labels to original dataframe
df['Cluster'] = clusters

# Print cluster centers (scaled)
centers = pd.DataFrame(kmeans.cluster_centers_, columns=X.columns)
print("\nCluster Centers (Standardized Features):")
print(centers.round(2))

# 7. Optional: Visualize clusters using PCA
from sklearn.decomposition import PCA
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

plt.figure(figsize=(8, 6))
sns.scatterplot(x=X_pca[:, 0], y=X_pca[:, 1], hue=clusters, palette='Set2', s=70)
plt.title('K-Means Clusters Visualized with PCA (Gaussian Noise)')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.legend(title='Cluster')
plt.grid(True)
plt.show()
