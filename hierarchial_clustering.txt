import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score, adjusted_rand_score, confusion_matrix
from scipy.cluster.hierarchy import linkage, dendrogram, fcluster

# 1. Load the dataset
iris = load_iris()
X = pd.DataFrame(iris.data, columns=iris.feature_names)
y = iris.target  # Actual species labels for evaluation

# 2. Standardize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# 3. Perform Hierarchical Clustering
linkage_matrix = linkage(X_scaled, method='ward')

# 4. Plot Dendrogram
plt.figure(figsize=(10, 6))
dendrogram(linkage_matrix, truncate_mode='lastp', p=30, leaf_rotation=90., leaf_font_size=12., show_contracted=True)
plt.title('Hierarchical Clustering Dendrogram (Ward Linkage)')
plt.xlabel('Sample Index or Cluster Size')
plt.ylabel('Distance')
plt.show()

# 5. Form flat clusters (letâ€™s pick 3 clusters, since we know Iris has 3 species)
clusters = fcluster(linkage_matrix, 3, criterion='maxclust')

# 6. Evaluate Clustering
sil_score = silhouette_score(X_scaled, clusters)
ari_score = adjusted_rand_score(y, clusters)

print(f"\nSilhouette Score: {sil_score:.4f}")
print(f"Adjusted Rand Index (ARI): {ari_score:.4f}")

# Optional: Confusion Matrix between predicted clusters and true labels
print("\nConfusion Matrix (Cluster vs True Labels):")
print(confusion_matrix(y, clusters))
